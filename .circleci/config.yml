version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2
  aws-cli: circleci/aws-cli@1.3.0
  
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "EC2Instances-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "EKSNodes-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "EKSCluster-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "Network-<< pipeline.parameters.workflow-id >>"
jobs:
    run-lint:
      docker:
        - image: python:3.7.3-stretch
      steps:
        - checkout
        - run:
            name: Make install
            command: |
               cd docker-nginx
               make install
        - run:
            name: Lint Docker and Application files
            command: |
               cd docker-nginx
               make lint

    build-docker:
      machine: true
      steps:
        - checkout
        - run:
            name: Build Docker Image
            command: |
              cd docker-nginx
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=capstone-aws-cloud-devops
              docker build -t kumatrx/$IMAGE_NAME:$TAG .

    push-docker:
      machine: true
      steps:
        - checkout
        - run:
            name: Push Docker Image to Docker Hub
            command: |
              cd docker-nginx
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=capstone-aws-cloud-devops
              docker build -t kumatrx/$IMAGE_NAME:$TAG .
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
              docker push kumatrx/$IMAGE_NAME:$TAG

    create_network:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - aws-cli/setup
          - run:
              name: Ensure network infrastructure exist
              command: |
                cd infra
                aws cloudformation deploy \
                --template-file network.yml \
                --tags project=UdacityCloudDevopsCapstoneProject \
                --stack-name Network-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides file://network-params.json
          - destroy-environment

    create_cluster:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - aws-cli/setup
          - run:
              name: Create Amazon EKS Cluster
              command: |
                cd infra
                aws cloudformation deploy \
                --template-file kube-cluster.yml \
                --tags project=UdacityCloudDevopsCapstoneProject \
                --stack-name EKSCluster-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides file://kube-cluster-params.json \
                --capabilities CAPABILITY_NAMED_IAM
              no_output_timeout: 15m
          - destroy-environment

    create_nodes:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - aws-cli/setup
          - run:
              name: Attach nodes to the Amazon EKS Cluster
              command: |
                cd infra
                aws cloudformation deploy \
                --template-file nodes.yml \
                --tags project=UdacityCloudDevopsCapstoneProject \
                --stack-name EKSNodes-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides file://nodes-params.json \
                --capabilities CAPABILITY_NAMED_IAM
              # fix Too long with no output
              no_output_timeout: 15m
          - destroy-environment

    create_servers:
      docker:
        - image: cimg/base:2020.01
        steps:
          - checkout
          - aws-cli/setup
          - run:
              name: Create EC2 instances
              command: |
                cd infra
                aws cloudformation deploy \
                --template-file servers.yml \
                --tags project=UdacityCloudDevopsCapstoneProject \
                --stack-name EC2Instances-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides file://server-params.json
          - destroy-environment

    create_deployment:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: /home/circleci/project/.circleci/deployment-and-service.yml
            resource-name: deployment/capstone-nginx
        - destroy-environment

    create_test:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            capstone-nginx
          type: string
      steps:
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
        - run:
            name: Test cluster
            command: |
              kubectl get svc
              kubectl get pods
              kubectl describe pods
              kubectl get nodes
              kubectl get deployment
              kubectl describe service capstone-nginx
              kubectl get services -o wide
        - destroy-environment

    update_deployment:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: /home/circleci/project/.circleci/deployment-and-servicev2.yml
            resource-name: deployment/capstone-nginx
        - run:
          command: |
              kubectl rollout status deployment capstone-nginx
              kubectl get deployment capstone-nginx

workflows:
  default:
    jobs:
      - run-lint
      - create_servers