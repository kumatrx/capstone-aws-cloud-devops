version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2
  slack: circleci/slack@4.1.1
  
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "63cb433a-201e-4bad-ae0e-23c6c20d1ae2"

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "EC2Instances-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "EKSNodes-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "EKSCluster-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "Network-<< pipeline.parameters.workflow-id >>"
jobs:
    run-lint:
      docker:
        - image: python:3.7.3-stretch
      steps:
        - checkout
        - run:
            name: Make install
            command: |
               cd docker-nginx
               make install
        - run:
            name: Lint Docker and Application files
            command: |
               cd docker-nginx
               make lint
        - slack/notify:
            event: fail
            template: basic_fail_1

    build-docker:
      machine: true
      steps:
        - checkout
        - run:
            name: Build Docker Image
            command: |
              cd docker-nginx
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=capstone-aws-cloud-devops
              docker build -t kumatrx/$IMAGE_NAME:$TAG .
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: success_tagged_deploy_1

    push-docker:
      machine: true
      steps:
        - checkout
        - run:
            name: Push Docker Image to Docker Hub
            command: |
              cd docker-nginx
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=capstone-aws-cloud-devops
              docker build -t kumatrx/$IMAGE_NAME:$TAG .
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
              docker push kumatrx/$IMAGE_NAME:$TAG

    create_network:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure network infrastructure exist
            command: |
              cd infra
              aws cloudformation deploy \
              --template-file network.yml \
              --tags project=UdacityCloudDevopsCapstoneProject \
              --stack-name Network-<< pipeline.parameters.workflow-id >> \
              --parameter-overrides file://network-params.json
        - destroy-environment

    create_cluster:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Amazon EKS Cluster
            command: |
              cd infra
              aws cloudformation deploy \
              --template-file kube-cluster.yml \
              --tags project=UdacityCloudDevopsCapstoneProject \
              --stack-name EKSCluster-<< pipeline.parameters.workflow-id >> \
              --parameter-overrides file://kube-cluster-params.json \
              --capabilities CAPABILITY_NAMED_IAM
            no_output_timeout: 15m
        - destroy-environment

    create_nodes:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Attach nodes to the Amazon EKS Cluster
            command: |
              cd infra
              aws cloudformation deploy \
              --template-file nodes.yml \
              --tags project=UdacityCloudDevopsCapstoneProject \
              --stack-name EKSNodes-<< pipeline.parameters.workflow-id >> \
              --parameter-overrides file://nodes-params.json \
              --capabilities CAPABILITY_NAMED_IAM
            # fix Too long with no output
            no_output_timeout: 15m
        - destroy-environment

    create_servers:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create EC2 instances
            command: |
              cd infra
              aws cloudformation deploy \
              --template-file servers.yml \
              --tags project=UdacityCloudDevopsCapstoneProject \
              --stack-name EC2Instances-<< pipeline.parameters.workflow-id >> \
              --parameter-overrides file://server-params.json
        - destroy-environment

    create_deployment:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: /home/circleci/project/.circleci/deployment-and-service.yml
            resource-name: deployment/capstone-nginx
        - destroy-environment
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: success_tagged_deploy_1

    smoke_test:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            capstone-nginx
          type: string
      steps:
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
        - run:
            name: Test cluster
            command: |
              kubectl get svc
              kubectl get pods
              kubectl describe pods
              kubectl get nodes
              kubectl get deployment
              kubectl describe service capstone-nginx
              kubectl get services -o wide
        - destroy-environment
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: success_tagged_deploy_1

    update_deployment:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: /home/circleci/project/.circleci/deployment-and-servicev2.yml
            resource-name: deployment/capstone-nginx
        - run:
          command: |
              kubectl rollout status deployment capstone-nginx
              kubectl get deployment capstone-nginx

    cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID})
              echo "Old Workflow ID: ${OldWorkflowID}"
              if [ -z "${OldWorkflowID}" ]
              then
                echo "1st implementation"
              elif [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
              then
                aws cloudformation delete-stack --stack-name "EC2Instances-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "EKSNodes-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "EKSCluster-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "Network-${OldWorkflowID}"

              fi

workflows:
  default:
    jobs:
      - run-lint
      - build-docker:
            requires: [run-lint]
      - push-docker:
            requires: [build-docker]
      - create_network:
            requires: [build-docker]
            filters:
              branches:
                only: [master]
##      - create_cluster:
##            requires: [create_network]
##      - create_nodes:
##           requires: [create_cluster] 
      - create_servers:
            requires: [create_nodes]
      - create_deployment:
            cluster-name: ProjectCapstone-ekscluster
            requires: [create_servers]
      - smoke_test:
            cluster-name: ProjectCapstone-ekscluster
            requires: [create_servers]